# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from dataclasses import dataclass
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
import urllib3
from deutschland.pegel_online import schemas  # noqa: F401
from deutschland.pegel_online import api_client, exceptions
from deutschland.pegel_online.model.timeseries_not_found import TimeseriesNotFound
from urllib3._collections import HTTPHeaderDict

from . import path

# query params
StartSchema = schemas.StrSchema
EndSchema = schemas.StrSchema
WidthSchema = schemas.NumberSchema
HeightSchema = schemas.NumberSchema
EnableSecondaryYAxisSchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    "RequestRequiredQueryParams", {}
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    "RequestOptionalQueryParams",
    {
        "start": typing.Union[
            StartSchema,
            str,
        ],
        "end": typing.Union[
            EndSchema,
            str,
        ],
        "width": typing.Union[
            WidthSchema,
            decimal.Decimal,
            int,
            float,
        ],
        "height": typing.Union[
            HeightSchema,
            decimal.Decimal,
            int,
            float,
        ],
        "enableSecondaryYAxis": typing.Union[
            EnableSecondaryYAxisSchema,
            bool,
        ],
    },
    total=False,
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_start = api_client.QueryParameter(
    name="start",
    style=api_client.ParameterStyle.FORM,
    schema=StartSchema,
    explode=True,
)
request_query_end = api_client.QueryParameter(
    name="end",
    style=api_client.ParameterStyle.FORM,
    schema=EndSchema,
    explode=True,
)
request_query_width = api_client.QueryParameter(
    name="width",
    style=api_client.ParameterStyle.FORM,
    schema=WidthSchema,
    explode=True,
)
request_query_height = api_client.QueryParameter(
    name="height",
    style=api_client.ParameterStyle.FORM,
    schema=HeightSchema,
    explode=True,
)
request_query_enable_secondary_y_axis = api_client.QueryParameter(
    name="enableSecondaryYAxis",
    style=api_client.ParameterStyle.FORM,
    schema=EnableSecondaryYAxisSchema,
    explode=True,
)
# path params
StationSchema = schemas.StrSchema
TimeseriesSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    "RequestRequiredPathParams",
    {
        "station": typing.Union[
            StationSchema,
            str,
        ],
        "timeseries": typing.Union[
            TimeseriesSchema,
            str,
        ],
    },
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    "RequestOptionalPathParams", {}, total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_station = api_client.PathParameter(
    name="station",
    style=api_client.ParameterStyle.SIMPLE,
    schema=StationSchema,
    required=True,
)
request_path_timeseries = api_client.PathParameter(
    name="timeseries",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TimeseriesSchema,
    required=True,
)
SchemaFor200ResponseBodyImagePng = schemas.BinarySchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyImagePng,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "image/png": api_client.MediaType(schema=SchemaFor200ResponseBodyImagePng),
    },
)
SchemaFor404ResponseBodyApplicationJson = TimeseriesNotFound


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson
        ),
    },
)
_status_code_to_response = {
    "200": _response_for_200,
    "404": _response_for_404,
}
_all_accept_content_types = (
    "image/png",
    "application/json",
)


class BaseApi(api_client.Api):
    def _get_measurement_diagram_by_station_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        """
        Zugriff auf die Ressource Measurement - RÃ¼ckgabe als Diagramm (PNG)
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_station,
            request_path_timeseries,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace("{%s}" % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_start,
            request_query_end,
            request_query_width,
            request_query_height,
            request_query_enable_secondary_y_axis,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(
                parameter_data, prefix_separator_iterator
            )
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class GetMeasurementDiagramByStation(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def get_measurement_diagram_by_station(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        return self._get_measurement_diagram_by_station_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        return self._get_measurement_diagram_by_station_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
