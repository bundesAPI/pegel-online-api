# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from dataclasses import dataclass
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
import urllib3
from deutschland.pegel_online import schemas  # noqa: F401
from deutschland.pegel_online import api_client, exceptions
from deutschland.pegel_online.model.station_overview_result import StationOverviewResult
from urllib3._collections import HTTPHeaderDict

from . import path

# query params
IncludeTimeseriesSchema = schemas.BoolSchema
IncludeCurrentMeasurementSchema = schemas.BoolSchema
IncludeCharacteristicValuesSchema = schemas.BoolSchema


class WatersSchema(schemas.ListSchema):
    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[
            typing.Tuple[
                typing.Union[
                    MetaOapg.items,
                    str,
                ]
            ],
            typing.List[
                typing.Union[
                    MetaOapg.items,
                    str,
                ]
            ],
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "WatersSchema":
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class IdsSchema(schemas.ListSchema):
    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[
            typing.Tuple[
                typing.Union[
                    MetaOapg.items,
                    str,
                ]
            ],
            typing.List[
                typing.Union[
                    MetaOapg.items,
                    str,
                ]
            ],
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "IdsSchema":
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


TimeseriesSchema = schemas.StrSchema
FuzzyIdSchema = schemas.StrSchema
LatitudeSchema = schemas.Float32Schema
LongitudeSchema = schemas.Float32Schema
KmSchema = schemas.Float32Schema
RadiusSchema = schemas.Float32Schema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    "RequestRequiredQueryParams", {}
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    "RequestOptionalQueryParams",
    {
        "includeTimeseries": typing.Union[
            IncludeTimeseriesSchema,
            bool,
        ],
        "includeCurrentMeasurement": typing.Union[
            IncludeCurrentMeasurementSchema,
            bool,
        ],
        "includeCharacteristicValues": typing.Union[
            IncludeCharacteristicValuesSchema,
            bool,
        ],
        "waters": typing.Union[
            WatersSchema,
            list,
            tuple,
        ],
        "ids": typing.Union[
            IdsSchema,
            list,
            tuple,
        ],
        "timeseries": typing.Union[
            TimeseriesSchema,
            str,
        ],
        "fuzzyId": typing.Union[
            FuzzyIdSchema,
            str,
        ],
        "latitude": typing.Union[
            LatitudeSchema,
            decimal.Decimal,
            int,
            float,
        ],
        "longitude": typing.Union[
            LongitudeSchema,
            decimal.Decimal,
            int,
            float,
        ],
        "km": typing.Union[
            KmSchema,
            decimal.Decimal,
            int,
            float,
        ],
        "radius": typing.Union[
            RadiusSchema,
            decimal.Decimal,
            int,
            float,
        ],
    },
    total=False,
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_include_timeseries = api_client.QueryParameter(
    name="includeTimeseries",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeTimeseriesSchema,
    explode=True,
)
request_query_include_current_measurement = api_client.QueryParameter(
    name="includeCurrentMeasurement",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeCurrentMeasurementSchema,
    explode=True,
)
request_query_include_characteristic_values = api_client.QueryParameter(
    name="includeCharacteristicValues",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeCharacteristicValuesSchema,
    explode=True,
)
request_query_waters = api_client.QueryParameter(
    name="waters",
    style=api_client.ParameterStyle.FORM,
    schema=WatersSchema,
)
request_query_ids = api_client.QueryParameter(
    name="ids",
    style=api_client.ParameterStyle.FORM,
    schema=IdsSchema,
)
request_query_timeseries = api_client.QueryParameter(
    name="timeseries",
    style=api_client.ParameterStyle.FORM,
    schema=TimeseriesSchema,
)
request_query_fuzzy_id = api_client.QueryParameter(
    name="fuzzyId",
    style=api_client.ParameterStyle.FORM,
    schema=FuzzyIdSchema,
    explode=True,
)
request_query_latitude = api_client.QueryParameter(
    name="latitude",
    style=api_client.ParameterStyle.FORM,
    schema=LatitudeSchema,
    explode=True,
)
request_query_longitude = api_client.QueryParameter(
    name="longitude",
    style=api_client.ParameterStyle.FORM,
    schema=LongitudeSchema,
    explode=True,
)
request_query_km = api_client.QueryParameter(
    name="km",
    style=api_client.ParameterStyle.FORM,
    schema=KmSchema,
    explode=True,
)
request_query_radius = api_client.QueryParameter(
    name="radius",
    style=api_client.ParameterStyle.FORM,
    schema=RadiusSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = StationOverviewResult


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_status_code_to_response = {
    "200": _response_for_200,
}
_all_accept_content_types = ("application/json",)


class BaseApi(api_client.Api):
    def _get_stations_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        """
        Übersicht über alle Stationen (Pegel)
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_include_timeseries,
            request_query_include_current_measurement,
            request_query_include_characteristic_values,
            request_query_waters,
            request_query_ids,
            request_query_timeseries,
            request_query_fuzzy_id,
            request_query_latitude,
            request_query_longitude,
            request_query_km,
            request_query_radius,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(
                parameter_data, prefix_separator_iterator
            )
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class GetStations(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def get_stations(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        return self._get_stations_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        return self._get_stations_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
