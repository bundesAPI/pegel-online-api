# coding: utf-8

"""
    Pegel-Online API

    API für das bundesweite Messstellennetz der Wasserstraßen- und Schifffahrtsverwaltung des Bundes.  Die API stellt drei verschiedene Ressourcen zur Verfügung: __Station__, __Measurement__, __Water__. ### Authentifizierung / Autorisierung / API Limitierung Es ist keine Authentifizierung oder Autorisierung notwendig. Aktuell besteht keine API Limitierung. ### Allgemeine Query-Parameter Zusätzlich zu den angegebenen Parametern sind ebenfalls allgemeine Parameter für alle Schnittstellen verfügbar ([Dokumentation](https://www.pegelonline.wsv.de/webservice/dokuRestapi;jsessionid=A294589CCEF6630142D2589F49BFA2EC#urlParameter)). - `charset`: Gibt die Kodierung der Response an. Standard ist hier _UTF-8_. Möglich ist z.B. auch _ISO-8859-1_. - `prettyprint`: Kann die zur besseren Lesbarkeit standardmäßig aktivierte Teilung der Response in mehreren Zeilen deaktivieren: _prettyprint=false_. Diese Einstellung wird für den produktiven Einsatz empfohlen. - `limit/offset`: Einschränkung der Anzahl der Ergebnisse. Hiermit kann 'Pagination' realisiert werden. `limit` gibt dabei die Anzahl der zurückgegebenen Elemente an. `offset` ermöglicht einen Offset vom Startwert. Beispiel: _limit=10&offset=20_ bedeutet, dass 10 Elemente beginnend mit dem 21. Element zurückgegeben werden.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from pegel_online import schemas  # noqa: F401

class Timeseries(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            shortname = schemas.StrSchema
            longname = schemas.StrSchema
            unit = schemas.StrSchema
            equidistance = schemas.Float32Schema

            @staticmethod
            def currrentMeasurement() -> typing.Type["CurrentMeasurement"]:
                return CurrentMeasurement

            class gaugeZero(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        unit = schemas.StrSchema
                        value = schemas.Float32Schema
                        validFrom = schemas.DateSchema
                        __annotations__ = {
                            "unit": unit,
                            "value": value,
                            "validFrom": validFrom,
                        }
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["unit"]
                ) -> MetaOapg.properties.unit: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["value"]
                ) -> MetaOapg.properties.value: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["validFrom"]
                ) -> MetaOapg.properties.validFrom: ...
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "unit",
                            "value",
                            "validFrom",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["unit"]
                ) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["value"]
                ) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["validFrom"]
                ) -> typing.Union[MetaOapg.properties.validFrom, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "unit",
                            "value",
                            "validFrom",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)
                def __new__(
                    cls,
                    *args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    unit: typing.Union[
                        MetaOapg.properties.unit, str, schemas.Unset
                    ] = schemas.unset,
                    value: typing.Union[
                        MetaOapg.properties.value,
                        decimal.Decimal,
                        int,
                        float,
                        schemas.Unset,
                    ] = schemas.unset,
                    validFrom: typing.Union[
                        MetaOapg.properties.validFrom, str, date, schemas.Unset
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "gaugeZero":
                    return super().__new__(
                        cls,
                        *args,
                        unit=unit,
                        value=value,
                        validFrom=validFrom,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class characteristicValues(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.DictSchema
                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                dict,
                                frozendict.frozendict,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                dict,
                                frozendict.frozendict,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "characteristicValues":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "shortname": shortname,
                "longname": longname,
                "unit": unit,
                "equidistance": equidistance,
                "currrentMeasurement": currrentMeasurement,
                "gaugeZero": gaugeZero,
                "characteristicValues": characteristicValues,
            }
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["shortname"]
    ) -> MetaOapg.properties.shortname: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["longname"]
    ) -> MetaOapg.properties.longname: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["unit"]
    ) -> MetaOapg.properties.unit: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["equidistance"]
    ) -> MetaOapg.properties.equidistance: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["currrentMeasurement"]
    ) -> "CurrentMeasurement": ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["gaugeZero"]
    ) -> MetaOapg.properties.gaugeZero: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["characteristicValues"]
    ) -> MetaOapg.properties.characteristicValues: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "shortname",
                "longname",
                "unit",
                "equidistance",
                "currrentMeasurement",
                "gaugeZero",
                "characteristicValues",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["shortname"]
    ) -> typing.Union[MetaOapg.properties.shortname, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["longname"]
    ) -> typing.Union[MetaOapg.properties.longname, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["unit"]
    ) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["equidistance"]
    ) -> typing.Union[MetaOapg.properties.equidistance, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["currrentMeasurement"]
    ) -> typing.Union["CurrentMeasurement", schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["gaugeZero"]
    ) -> typing.Union[MetaOapg.properties.gaugeZero, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["characteristicValues"]
    ) -> typing.Union[MetaOapg.properties.characteristicValues, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "shortname",
                "longname",
                "unit",
                "equidistance",
                "currrentMeasurement",
                "gaugeZero",
                "characteristicValues",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        shortname: typing.Union[
            MetaOapg.properties.shortname, str, schemas.Unset
        ] = schemas.unset,
        longname: typing.Union[
            MetaOapg.properties.longname, str, schemas.Unset
        ] = schemas.unset,
        unit: typing.Union[
            MetaOapg.properties.unit, str, schemas.Unset
        ] = schemas.unset,
        equidistance: typing.Union[
            MetaOapg.properties.equidistance, decimal.Decimal, int, float, schemas.Unset
        ] = schemas.unset,
        currrentMeasurement: typing.Union[
            "CurrentMeasurement", schemas.Unset
        ] = schemas.unset,
        gaugeZero: typing.Union[
            MetaOapg.properties.gaugeZero, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        characteristicValues: typing.Union[
            MetaOapg.properties.characteristicValues, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "Timeseries":
        return super().__new__(
            cls,
            *args,
            shortname=shortname,
            longname=longname,
            unit=unit,
            equidistance=equidistance,
            currrentMeasurement=currrentMeasurement,
            gaugeZero=gaugeZero,
            characteristicValues=characteristicValues,
            _configuration=_configuration,
            **kwargs,
        )

from pegel_online.model.current_measurement import CurrentMeasurement
