# coding: utf-8

"""
    Pegel-Online API

    API für das bundesweite Messstellennetz der Wasserstraßen- und Schifffahrtsverwaltung des Bundes.  Die API stellt drei verschiedene Ressourcen zur Verfügung: __Station__, __Measurement__, __Water__. ### Authentifizierung / Autorisierung / API Limitierung Es ist keine Authentifizierung oder Autorisierung notwendig. Aktuell besteht keine API Limitierung. ### Allgemeine Query-Parameter Zusätzlich zu den angegebenen Parametern sind ebenfalls allgemeine Parameter für alle Schnittstellen verfügbar ([Dokumentation](https://www.pegelonline.wsv.de/webservice/dokuRestapi;jsessionid=A294589CCEF6630142D2589F49BFA2EC#urlParameter)). - `charset`: Gibt die Kodierung der Response an. Standard ist hier _UTF-8_. Möglich ist z.B. auch _ISO-8859-1_. - `prettyprint`: Kann die zur besseren Lesbarkeit standardmäßig aktivierte Teilung der Response in mehreren Zeilen deaktivieren: _prettyprint=false_. Diese Einstellung wird für den produktiven Einsatz empfohlen. - `limit/offset`: Einschränkung der Anzahl der Ergebnisse. Hiermit kann 'Pagination' realisiert werden. `limit` gibt dabei die Anzahl der zurückgegebenen Elemente an. `offset` ermöglicht einen Offset vom Startwert. Beispiel: _limit=10&offset=20_ bedeutet, dass 10 Elemente beginnend mit dem 21. Element zurückgegeben werden.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from pegel_online import schemas  # noqa: F401

class Station(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            uuid = schemas.StrSchema
            number = schemas.StrSchema
            shortname = schemas.StrSchema
            longname = schemas.StrSchema
            km = schemas.Float32Schema
            agency = schemas.StrSchema
            longitude = schemas.Float32Schema
            latitude = schemas.Float32Schema

            class water(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        shortname = schemas.StrSchema
                        longname = schemas.StrSchema
                        __annotations__ = {
                            "shortname": shortname,
                            "longname": longname,
                        }
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["shortname"]
                ) -> MetaOapg.properties.shortname: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["longname"]
                ) -> MetaOapg.properties.longname: ...
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "shortname",
                            "longname",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["shortname"]
                ) -> typing.Union[MetaOapg.properties.shortname, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["longname"]
                ) -> typing.Union[MetaOapg.properties.longname, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "shortname",
                            "longname",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)
                def __new__(
                    cls,
                    *args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    shortname: typing.Union[
                        MetaOapg.properties.shortname, str, schemas.Unset
                    ] = schemas.unset,
                    longname: typing.Union[
                        MetaOapg.properties.longname, str, schemas.Unset
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "water":
                    return super().__new__(
                        cls,
                        *args,
                        shortname=shortname,
                        longname=longname,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class timeseries(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["Timeseries"]:
                        return Timeseries
                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple["Timeseries"], typing.List["Timeseries"]
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "timeseries":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "Timeseries":
                    return super().__getitem__(i)
            __annotations__ = {
                "uuid": uuid,
                "number": number,
                "shortname": shortname,
                "longname": longname,
                "km": km,
                "agency": agency,
                "longitude": longitude,
                "latitude": latitude,
                "water": water,
                "timeseries": timeseries,
            }
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["uuid"]
    ) -> MetaOapg.properties.uuid: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["number"]
    ) -> MetaOapg.properties.number: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["shortname"]
    ) -> MetaOapg.properties.shortname: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["longname"]
    ) -> MetaOapg.properties.longname: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["km"]
    ) -> MetaOapg.properties.km: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["agency"]
    ) -> MetaOapg.properties.agency: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["longitude"]
    ) -> MetaOapg.properties.longitude: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["latitude"]
    ) -> MetaOapg.properties.latitude: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["water"]
    ) -> MetaOapg.properties.water: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["timeseries"]
    ) -> MetaOapg.properties.timeseries: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "uuid",
                "number",
                "shortname",
                "longname",
                "km",
                "agency",
                "longitude",
                "latitude",
                "water",
                "timeseries",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["uuid"]
    ) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["number"]
    ) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["shortname"]
    ) -> typing.Union[MetaOapg.properties.shortname, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["longname"]
    ) -> typing.Union[MetaOapg.properties.longname, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["km"]
    ) -> typing.Union[MetaOapg.properties.km, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["agency"]
    ) -> typing.Union[MetaOapg.properties.agency, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["longitude"]
    ) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["latitude"]
    ) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["water"]
    ) -> typing.Union[MetaOapg.properties.water, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["timeseries"]
    ) -> typing.Union[MetaOapg.properties.timeseries, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "uuid",
                "number",
                "shortname",
                "longname",
                "km",
                "agency",
                "longitude",
                "latitude",
                "water",
                "timeseries",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        uuid: typing.Union[
            MetaOapg.properties.uuid, str, schemas.Unset
        ] = schemas.unset,
        number: typing.Union[
            MetaOapg.properties.number, str, schemas.Unset
        ] = schemas.unset,
        shortname: typing.Union[
            MetaOapg.properties.shortname, str, schemas.Unset
        ] = schemas.unset,
        longname: typing.Union[
            MetaOapg.properties.longname, str, schemas.Unset
        ] = schemas.unset,
        km: typing.Union[
            MetaOapg.properties.km, decimal.Decimal, int, float, schemas.Unset
        ] = schemas.unset,
        agency: typing.Union[
            MetaOapg.properties.agency, str, schemas.Unset
        ] = schemas.unset,
        longitude: typing.Union[
            MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset
        ] = schemas.unset,
        latitude: typing.Union[
            MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset
        ] = schemas.unset,
        water: typing.Union[
            MetaOapg.properties.water, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        timeseries: typing.Union[
            MetaOapg.properties.timeseries, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "Station":
        return super().__new__(
            cls,
            *args,
            uuid=uuid,
            number=number,
            shortname=shortname,
            longname=longname,
            km=km,
            agency=agency,
            longitude=longitude,
            latitude=latitude,
            water=water,
            timeseries=timeseries,
            _configuration=_configuration,
            **kwargs,
        )

from pegel_online.model.timeseries import Timeseries
